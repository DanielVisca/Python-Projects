#HELPER FUNCTIONS, must be called in order given

def name(file):
    """
     (file) -> str
     
     Return the name of the user as a string
     """
    return file.readline().strip()

def location(file):
    """
     (file) -> str
     
     Return the location of the user as a string
     """
    return file.readline().strip()

def website(file):
    """
    (file) -> str
    
    Return the website of the username as a string
    """
    return file.readline().strip()


def bio(file):
    """
    (file) -> str
    
    Return bio of the user as a string
    """
    bio = ''
    line = file.readline().strip()
    
    while line != 'ENDBIO':
        bio = bio + line + '\n'
        line = file.readline().strip()
        
    return bio

def following(file):
    """
    (file) -> str
    
    Return a list of the usernames that the user is following
    """
    following = []
    line = file.readline().strip()
    
    while line != 'END':
        following.append(line)
        line = file.readline().strip()
        
    return following    
    
def process_data(file):
    """
    (file open for reading) -> Twitterverse dictionary 
    
    Return the content of file as a dict it twitterverse dictionary format
    
    Twitterverse dictionary:  dict of {str: dict of {str: object}}
    - each key is a username (a str)
    - each value is a dict of {str: object} with items as follows:
        - key "name", value represents a user's name (a str)
        - key "location", value represents a user's location (a str)
        - key "web", value represents a user's website (a str)
        - key "bio", value represents a user's bio (a str)
        - key "following", value represents all the usernames of users this 
          user is following (a list of str)
    """
    final_dict = {}
    line = file.readline().strip()
    
    while line != '':
        dict_in_dict = {}        
        #I think my immature sense of humor makes this coding assignment way too
        #fun
        username = line        
        
        dict_in_dict['name'] = name(file)
        
        dict_in_dict['location'] = location(file)
     
        dict_in_dict['website'] = website(file)
        
        dict_in_dict['bio'] = bio(file)
        
        dict_in_dict['following'] = following(file)
        
        final_dict[username] = dict_in_dict
        
        line = file.readline().strip()
    
    return final_dict

#helper function for search_dict
def operations(file):
    """
    (file) -> list
    
    Return the list of following or followers of the username
    """
    line = file.readline().strip()
    the_list = []
    
    while line != 'FILTER':
        the_list.append(line)
        line = file.readline().strip()
        
    return the_list

#helper for query_dict
def search_dict(file):
    """
    (file) -> dict of str and lists
    
    Return dict with keys; username, operations.
    
    Search specification dictionary: dict of {str: object}
    - key "username", value represents the username to begin search at (a str)
    - key "operations", value represents the operations to perform (a list of 
    str)

    """
    big_dict = {}
    #I need to grow up
    
    #so that the username gets the second line
    file.readline()
    
    #username
    big_dict['username'] = file.readline().strip()
    
    #operation
    big_dict['operations'] = operations(file)
    
    return big_dict

#helper for query_dict
def filter_dict(file):
    """ 
    (file open for reading) -> filter_spec dictionary
    
    Return the lines in the file after 'FIlTER' up until 'PRESENT' in Filter 
    specification dictionary format
    
    Filter specification dictionary: dict of {str: str}
    - key "following" might exist, value represents a username (a str)
    - key "follower" might exist, value represents a username (a str)
    - key "name-includes" might exist, value represents a str to match (a 
      case-insensitive match)
    - key "location-includes" might exist, value represents a str to match (a 
      case-insensitive match)
    """
    line = file.readline().strip()
    dictionary = {}
    
    while line != 'PRESENT':
        key, value = line.split()
        dictionary[key] = value
        line = file.readline().strip()
        
    return dictionary   

#helper for query_dict
def present_dict(file):
    """ 
    (file open for reading) -> present_spec dictionary
    
    Precondition: all used lines must have only two words
            
    Return the lines after 'PRESENT' until an empty str, the first word of each 
    line is a key and the second is a value.
    
    Presentation specification dictionary: dict of {str: str}
    - key "sort-by", value represents how to sort results (a str)
    - key "format", value represents how to format results (a str)
    """
    
    line = file.readline().strip()
    dictionary = {}
    
    while line != '':
        key, value = line.split()
        dictionary[key] = value
        line = file.readline().strip()
        
    return dictionary    

def process_query(file):
    """
    (file open for reading) -> query dictionary
    
    Return the query text as a query dictionary 
    
    Query dictionary: dict of {str: dict of {str: object}}
   - key "search", value represents a search specification dictionary
   - key "filter", value represents a filter specification dictionary
   - key "present", value represents a presentation specification dictionary
    """
    biggest_dict = {}
    
    #Creating the final dictionary using the helper functions output as values
    biggest_dict['search'] = search_dict(file)
    biggest_dict['filter'] = filter_dict(file)
    biggest_dict['present'] = present_dict(file)
    
    return biggest_dict
#helper function for get_search_results
def all_followers(data_dict, username):
    """
    (Twitterverse dictionary, str) -> list of str 
    
    Return a list of the usersnames that are following the given username.
    """
    usernames = []
    twitterv_keys = list(data_dict.keys())
    
    for i in range(len(twitterv_keys)):
        other_username = twitterv_keys[i]
        
        if username in data_dict[other_username]['following']:
            usernames.append(twitterv_keys[i])
            
    return usernames
#TEST THIS FUNCTION!!

#helper function for get_search_results
def all_following(data_dict, username):
    """
    (Twitterverse dictionary, str) -> list of str 
      
    Return a list of the usersnames that the given username is following.
    """
    
    return data_dict[username]['following']
    #TEST THIS FUNCTION
    
def get_search_results(data_dict, search_specification):
    
    """
    (Twitterverse dictionary, search specification dictionary) -> list of str 
    
    Return 
    """
    operations = search_specification['operations']
    username = search_specification['username']
    the_list = [username]
    #are these necessary?
    new_list = []
    other_list = []
    
    for i in operations:
        new_list =[]
        other_list=[]  
        
        for s in range(len(the_list)):
            name = the_list[s]            
                   
            if i == 'following':
                other_list.extend(all_following(data_dict, name))
            
            elif i == 'followers':
                other_list.extend(all_followers(data_dict, name))
                
        for names in other_list:
            
            if not(names in new_list):
                new_list.append(names)
         
            the_list = new_list[:]
                         
    return the_list

def get_filter_results(data_dict, search_results, filter_spec):
    """ 
    (Twitterverse dictionary, list of str, filter specification 
    dictionary) -> list of str
    
    Return a list of the usernames given after search results is filtered
    """
    
    filtered = search_results
    
    filtering = {"follower": filter_follower,"name-includes": filter_name,
                 "location-includes":filter_location,"following": 
                 filter_following}
    
    if filter_spec != {}:
        
        for filters in filter_spec:
            filter_key = filter_spec[filters]
            #This doesnt wooorrrkkkk
            filtered = filtering[filters](data_dict,filtered,filter_key)
            
    return filtered

def filter_following(data_dict, filtered, filter_key):
    """ (Twitterverse dictionary, list of str, str) -> list of str
    
    Return a filtered list of usernames who are being followed by the username.
    """
    
    new_filter = []
    the_followers = all_followers(data_dict, filter_key)
    
    for username in filtered:
        if username in the_followers:
            new_filter.append(username)
            
    return new_filter

def filter_follower(data_dict, filtered, filter_key):
    """ (Twitterverse dictionary, list of str, str) -> list of str
    
    Return a filtered list of usernames who are following username.
    """
    
    new_filter = []
    
    for follower in filtered:
        if follower in all_following(data_dict, filter_key):
            new_filter.append(follower)
            
    return new_filter

def filter_name(data_dict, filtered, filter_key):
    """ (Twitterverse dictionary, list of str, str) -> list of str
    Return a filtered list of usernames from filtered where filter_key is 
    in the name key in data_dict.
    """
    
    new_filter = []
    key = filter_key.lower()
    
    for username in filtered:
        if key in data_dict[username]['name'].lower():
            new_filter.append(username)
            
    return new_filter

def filter_location(data_dict, filtered, filter_key):
    """ (Twitterverse dictionary, list of str, str) -> list of str
    
    Return a filtered list of usernames where filter_key is the value for the 
    key 'location' in data_dict
    """
    
    new_filter = []
    key = filter_key.lower()
    
    for username in filtered:
        if key in data_dict[username]['location'].lower():
            new_filter.append(username)
            
    return new_filter
# --- Sorting Helper Functions ---    
def tweet_sort(twitter_data, results, cmp):
    """
    (Twitterverse dictionary, list of str, function) -> NoneType
    
    Sort the results list using the comparison function cmp and the data in 
    twitter_data.
    
    >>> twitter_data = {\
    'a':{'name':'Zed', 'location':'', 'web':'', 'bio':'', 'following':[]}, \
    'b':{'name':'Lee', 'location':'', 'web':'', 'bio':'', 'following':[]}, \
    'c':{'name':'anna', 'location':'', 'web':'', 'bio':'', 'following':[]}}
    >>> result_list = ['c', 'a', 'b']
    >>> tweet_sort(twitter_data, result_list, username_first)
    >>> result_list
    ['a', 'b', 'c']
    >>> tweet_sort(twitter_data, result_list, name_first)
    >>> result_list
    ['b', 'a', 'c']
    """
    
    # Insertion sort
    for i in range(1, len(results)):
        current = results[i]
        position = i
        while position > 0 and cmp(twitter_data, results[position - 1], current) > 0:
            results[position] = results[position - 1]
            position = position - 1 
        results[position] = current  
       
def more_popular(twitter_data, a, b):
    """ (Twitterverse dictionary, str, str) -> int
    
    Return -1 if user a has more followers than user b, 1 if fewer followers, 
    and the result of sorting by username if they have the same, based on the 
    data in twitter_data.
    
    >>> twitter_data = {\
    'a':{'name':'', 'location':'', 'web':'', 'bio':'', 'following':['b']}, \
    'b':{'name':'', 'location':'', 'web':'', 'bio':'', 'following':[]}, \
    'c':{'name':'', 'location':'', 'web':'', 'bio':'', 'following':[]}}
    >>> more_popular(twitter_data, 'a', 'b')
    1
    >>> more_popular(twitter_data, 'a', 'c')
    -1
    """
    
    a_popularity = len(all_followers(twitter_data, a)) 
    b_popularity = len(all_followers(twitter_data, b))
    if a_popularity > b_popularity:
        return -1
    if a_popularity < b_popularity:
        return 1
    return username_first(twitter_data, a, b)
    
def username_first(twitter_data, a, b):
    """ (Twitterverse dictionary, str, str) -> int
    
    Return 1 if user a has a username that comes after user b's username 
    alphabetically, -1 if user a's username comes before user b's username, 
    and 0 if a tie, based on the data in twitter_data.
    
    >>> twitter_data = {\
    'a':{'name':'', 'location':'', 'web':'', 'bio':'', 'following':['b']}, \
    'b':{'name':'', 'location':'', 'web':'', 'bio':'', 'following':[]}, \
    'c':{'name':'', 'location':'', 'web':'', 'bio':'', 'following':[]}}
    >>> username_first(twitter_data, 'c', 'b')
    1
    >>> username_first(twitter_data, 'a', 'b')
    -1
    """
    
    if a < b:
        return -1
    if a > b:
        return 1
    return 0

def name_first(twitter_data, a, b):
    """ (Twitterverse dictionary, str, str) -> int
        
    Return 1 if user a's name comes after user b's name alphabetically, 
    -1 if user a's name comes before user b's name, and the ordering of their
    usernames if there is a tie, based on the data in twitter_data.
    
    >>> twitter_data = {\
    'a':{'name':'Zed', 'location':'', 'web':'', 'bio':'', 'following':[]}, \
    'b':{'name':'Lee', 'location':'', 'web':'', 'bio':'', 'following':[]}, \
    'c':{'name':'anna', 'location':'', 'web':'', 'bio':'', 'following':[]}}
    >>> name_first(twitter_data, 'c', 'b')
    1
    >>> name_first(twitter_data, 'b', 'a')
    -1
    """
    
    a_name = twitter_data[a]["name"]
    b_name = twitter_data[b]["name"]
    if a_name < b_name:
        return -1
    if a_name > b_name:
        return 1
    return username_first(twitter_data, a, b)       


if __name__ == '__main__':
    
    data_filename = input('Data file: ')
    data_file = open(data_filename, 'r')
    data = tf.process_data(data_file)
    data_file.close()
    
    query_filename = input('Query file: ')
    query_file = open(query_filename, 'r')
    query = tf.process_query(query_file)
    query_file.close()
        
    search_results = tf.get_search_results(data, query['search'])
    filtered_results = tf.get_filter_results(data, search_results, 
                                             query['filter'])
    presented_results = tf.get_present_string(data, filtered_results, 
                                              query['present'])
    
    print(presented_results, end="")

